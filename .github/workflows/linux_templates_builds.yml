name: üêß Linux Templates Builds
on: [push, pull_request]

# Global Settings
env:
  GODOT_BASE_BRANCH: 3.x
  SCONSFLAGS: platform=linuxbsd verbose=yes warnings=all werror=yes debug_symbols=no --jobs=2
  SCONS_CACHE_LIMIT: 4096

jobs:
  linux-template:
    runs-on: "ubuntu-20.04"
#    container:-Add linux templates.
#      image: thebigg1/godot-linux-templates:latest
    name: Linux templates X11
#    name: ${{ matrix.name }}
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          #          - name: Editor w/ Mono (target=release_debug, tools=yes)
#          #            cache-name: linux-editor-mono
#          #            target: release_debug
#          #            tools: true
#          #            sconsflags: module_mono_enabled=yes mono_glue=no
#          #            bin: "./bin/godot.x11.opt.tools.64.mono"
#          #            build-mono: true
#          #            artifact: false
#
#          - name: Editor w/ tools (target=release_debug, tools=yes, p=x11)
#            cache-name: linux-editor-x11
#            target: release_debug
#            tools: true
#            sconsflags: tools=yes p=x11
#            bin: "./bin/godot.x11.opt.tools.64"
#            bin-template: "linux_templates.zip"
#            build-mono: false
#            artifact: true
#            publish-release: true
#            version: "3.3.4"
#
#          - name: Editor and sanitizers (target=debug, tools=yes, use_asan=yes, use_ubsan=yes)
#            cache-name: linux-editor-sanitizers
#            target: debug
#            tools: true
#            sconsflags: use_asan=yes use_ubsan=yes
#            test: true
#            bin: "./bin/godot.x11.tools.64s"
#            build-mono: false
#            # Skip 2GiB artifact speeding up action.
#            artifact: true

    steps:
      - uses: actions/checkout@v2

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update

      - name: Configure dependencies
        run: |
          sudo dpkg --add-architecture i386 && apt-get update && apt-get install -y --no-install-recommends \
                   ca-certificates \
                   git \
                   git-lfs \
                   python \
                   python-openssl \
                   unzip \
                   wget \
                   zip \
                   adb \
                   xvfb \
                   openjdk-8-jdk-headless \
                   libmonosgen-2.0-1 \
                   libmono-cil-dev \
                   build-essential \
                   pkg-config \
                   libx11-dev \
                   libxcursor-dev \
                   libxinerama-dev \
                   libgl1-mesa-dev \
                   libglu-dev \
                   libasound2-dev \
                   libpulse-dev \
                   libudev-dev \
                   libxi-dev \
                   libxrandr-dev \
               #    yasm \
                   build-essential \
                   libx11-dev:i386 \
                   libxcursor-dev:i386 \
                   libxinerama-dev:i386 \
                   libgl1-mesa-dev:i386 \
                   libglu-dev:i386 \
                   libasound2-dev:i386 \
                   libpulse-dev:i386 \
                   libudev-dev:i386 \
                   libxi-dev:i386 \
                   libxrandr-dev:i386 \
                   yasm:i386 \
                   gcc-multilib \
                   g++-multilib \
                   scons


      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-template-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}
        continue-on-error: true

      # Use python 3.x release (works cross platform)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # You can test your matrix by printing the current Python version
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

#      - name: Compilation
#        env:
#          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
#        run: |
#          scons target=release tools=no module_mono_enabled=yes mono_glue=no
#          ls -l bin/

      - name: Compile linux templates
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons  platform=x11 tools=no target=release bits=32
          scons  platform=x11 tools=no target=release_debug bits=32
          scons  platform=x11 tools=no target=release bits=64
          scons  platform=x11 tools=no target=release_debug bits=64
          ls -l bin/

      - name: Zip Templates
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          cd bin
          cp godot.x11.opt.32 linux_x11_32_release
          cp godot.x11.opt.debug.32 linux_x11_32_debug
          cp godot.x11.opt.64 linux_x11_64_releasecache
          cp godot.x11.opt.debug.64 linux_x11_64_debug
          mkdir linux_templates
          cp linux_x11_32_debug linux_templates/
          cp linux_x11_32_release linux_templates/
          cp linux_x11_64_release linux_templates/
          cp linux_x11_64_debug linux_templates/
          zip -r linux_templates.zip linux_templates/

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}
          path: bin/*
          retention-days: 14
#      - name: Upload binaries to release
#        if: ${{ matrix.publish-release }}
#        uses: svenstaro/upload-release-action@v2
#        with:
#          repo_token: ${{ secrets.GITHUB_TOKEN }}
#          file: ${{ matrix.bin }}
#          asset_name: Godot-3.x-modules_v${{matrix.version}}-nightly_linux.64
#          tag: Godot-continuous-release
#          overwrite: true
#          body: "Bleeding edge release for those who like to live on the edge :)"

